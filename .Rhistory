?message
## Two functions that returns "m", the inverse matrix of "x"
## Creates matrix which caches an inverse matrix using four nested functions
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## Computes the inverse of a matrix created by makeCacheMatrix ()
## Also checks cached data to retrieve previous calculations
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
return(m)
}
matrix<-x$get ()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve (c(1,2,3))
makeCacheMatrix(c(1,2,3))
cacheSolve (c(1,2,3))
## Two functions that returns "m", the inverse matrix of "x"
## Creates matrix which caches an inverse matrix using four nested functions
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmat <- function(solve) m<<- solve
getmat <- function() m
list(set=set, get=get, setmat=setmat, getmat=getmat)
}
## Computes the inverse of a matrix created by makeCacheMatrix ()
## Also checks cached data to retrieve previous calculations
cacheSolve <- function(x=matrix(), ...) {
m <- x$getmat()
if(!is.null(m)){
return(m)
}
matrix<-x$get ()
m<-solve(matrix, ...)
x$setmat(m)
m
}
makeCacheMatrix()
cacheSolve()
test <- matrix(runif(9,1,100),3,3)
testCached <- makeCacheMatrix(test)
testInv <- cacheSolve(testCached)
View(testInv)
